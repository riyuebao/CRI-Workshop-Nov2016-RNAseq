#!/usr/bin/env bds

include "print.bds"
include "getmem.bds"

string[] picard(string sample, string util, string refGenome, string tmpdir, string infile, string outfile, string outdir, string logfile, string logdir, string softwareConfig) {

	//include "java.bds"
	baseJava := "java -XX:ParallelGCThreads=2 "
	
	// initialize
	string{} swParam = config(softwareConfig)
	string[] modlist
	string modname = "ExScaliburGMD::picard"
	string picardExe
	string samtoolsExe
	string modsource
	string modload = ""
	string javaMaxMemStr = ""
	int threads = 1
	int memory = 1

	string[] tids
	string tid
	string[] infiles = infile.split(",")
	string inputString
	int infileTotal
	int maxRecordsInMem = 500000

	// assign values
	if(swParam.hasKey("java_module")) { modlist.push(swParam{"java_module"}) }
	if(swParam.hasKey("main_module_source")) { modsource = swParam{"main_module_source"} }
	if(swParam.hasKey("picard_exe")) { picardExe = swParam{"picard_exe"} }
	if(swParam.hasKey("picard_module")) { modlist.push(swParam{"picard_module"}) }
	if(swParam.hasKey("picard_threads")) { threads = swParam{"picard_threads"}.parseInt() }
	if(swParam.hasKey("picard_mem")) { memory = swParam{"picard_mem"}.parseInt() }
	if(swParam.hasKey("picard_max_records_in_mem")) { maxRecordsInMem = swParam{"picard_max_records_in_mem"}.parseInt() }
	if(swParam.hasKey("samtools_exe")) { samtoolsExe = swParam{"samtools_exe"} }
	if(swParam.hasKey("samtools_module")) { modlist.push(swParam{"samtools_module"}) }

	if(modsource.length() > 0) { modload = ". $modsource; " }
	for(string mod : modlist) { modload += "module load $mod; " }
	javaMaxMemStr = " -Xmx$memory" + "G"  // note java must have the total memory
	memory = getmem((memory+1) * G, threads)  // get per slot mem for task (SGE only)

	infileTotal = infiles.size()
	for(string in : infiles) { inputString += " I=$in" }
	
	// println info(modname, "START | sm=$sample | util=$util | bamTotal=$infileTotal")

	// run start
	if(! outdir.isDir()) { outdir.mkdir() }
	if(! logdir.isDir()) { logdir.mkdir() }	
	if(! tmpdir.isDir()) { tmpdir.mkdir() }

	// merge bam files
	if((infileTotal >= 2) && (util == "MergeSamFiles")) {
		if(outfile <- infiles) {
			println info(modname, "task=run_mergeBam | run=1")
			tid = task(outfile + ".bai" <- infiles, cpus := threads, mem := memory, \
				inputString != "") {
				sys echo "$sample::picard::$util"
				sys $modload
				sys $baseJava $javaMaxMemStr -jar $picardExe/$util.jar $inputString O=$outfile TMP_DIR=$tmpdir SO=coordinate AS=true VALIDATION_STRINGENCY=LENIENT MAX_RECORDS_IN_RAM=$maxRecordsInMem >& $logdir/$logfile
				sys $samtoolsExe index $outfile >> $logdir/$logfile 2>&1
				sys sleep $safeSleep
			}

			tids.push(tid)
		}
		else {
			println info(modname, "task=run_mergeBam | run=0")
		}

	}

	// mark dups
	if((infileTotal == 1) && (util == "MarkDuplicates")) {
		if(outfile <- infiles) {
			println info(modname, "task=run_markDups | run=1")
			tid = task(outfile + ".bai" <- infiles, cpus := threads, mem := memory, \
				inputString != "") {
				sys echo "$sample::picard::$util"
				sys $modload
				sys $baseJava $javaMaxMemStr -jar $picardExe/$util.jar $inputString O=$outfile METRICS_FILE=$outfile.metrics REMOVE_DUPLICATES=true TMP_DIR=$tmpdir AS=true VALIDATION_STRINGENCY=LENIENT PG=null MAX_RECORDS_IN_RAM=$maxRecordsInMem >& $logdir/$logfile
				sys $samtoolsExe index $outfile >> $logdir/$logfile 2>&1
				sys $samtoolsExe flagstat $outfile > $outfile.flagstat 2>> $logdir/$logfile	
				sys sleep $safeSleep
			}

			tids.push(tid)
		}
		else {
			println info(modname, "task=run_markDups | run=0")
		}
		
	}

	// collect multi metrics
	if((infileTotal == 1) && (util == "CollectMultipleMetrics")) {
		if(outfile + ".alignment_summary_metrics" <- infiles) {
			println info(modname, "task=run_collectMultiMetrics | run=1")
			tid = task(outfile + ".alignment_summary_metrics" <- infiles, cpus := threads, mem := memory, \
				inputString != "") {
				sys echo "$sample::picard::$util"
				sys $modload
				sys $baseJava $javaMaxMemStr -jar $picardExe/$util.jar $inputString O=$outfile R=$refGenome PROGRAM=CollectAlignmentSummaryMetrics PROGRAM=CollectInsertSizeMetrics PROGRAM=QualityScoreDistribution PROGRAM=MeanQualityByCycle TMP_DIR=$tmpdir AS=true VALIDATION_STRINGENCY=LENIENT MAX_RECORDS_IN_RAM=$maxRecordsInMem >& $logdir/$logfile
				sys sleep $safeSleep				
			}

			tids.push(tid)
		}
		else {
			println info(modname, "task=run_collectMultiMetrics | run=0")
		}
		
	}	
	
	// println info(modname, "END | sm=$sample | util=$util | bamTotal=$infileTotal")

	return tids
}

